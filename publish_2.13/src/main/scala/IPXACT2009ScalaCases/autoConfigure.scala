package IPXACT2009ScalaCases

// Generated by <a href="http://IPXACT2009scalaxb.org/">IPXACT2009scalaxb</a>.

sealed trait FormatType

object FormatType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: IPXACT2009scalaxb.XMLFormat[FormatType]): FormatType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: FormatType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[FormatType] = Seq(BitString, Bool, FloatTypeValue, LongTypeValue, StringType)
}

case object BitString extends FormatType { override def toString = "bitString" }
case object Bool extends FormatType { override def toString = "bool" }
case object FloatTypeValue extends FormatType { override def toString = "float" }
case object LongTypeValue extends FormatType { override def toString = "long" }
case object StringType extends FormatType { override def toString = "string" }

sealed trait RangeTypeType

object RangeTypeType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: IPXACT2009scalaxb.XMLFormat[RangeTypeType]): RangeTypeType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: RangeTypeType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[RangeTypeType] = Seq(FloatTypeValue2, IntTypeValue, UnsignedintValue, LongTypeValue2, UnsignedlongValue)
}

case object FloatTypeValue2 extends RangeTypeType { override def toString = "float" }
case object IntTypeValue extends RangeTypeType { override def toString = "int" }
case object UnsignedintValue extends RangeTypeType { override def toString = "unsigned int" }
case object LongTypeValue2 extends RangeTypeType { override def toString = "long" }
case object UnsignedlongValue extends RangeTypeType { override def toString = "unsigned long" }

sealed trait DelayValueUnitType

object DelayValueUnitType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: IPXACT2009scalaxb.XMLFormat[DelayValueUnitType]): DelayValueUnitType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: DelayValueUnitType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[DelayValueUnitType] = Seq(Ps, Ns)
}

case object Ps extends DelayValueUnitType { override def toString = "ps" }
case object Ns extends DelayValueUnitType { override def toString = "ns" }


case class Enumeration(value: String,
  attributes: Map[String, IPXACT2009scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val text = attributes.get("@text") map { _.as[String]}
  lazy val help = attributes.get("@help") map { _.as[String]}
}

      
      


case class Choice(name: String,
  enumeration: Seq[Enumeration] = Nil)
      
      


case class Choices(choice: Seq[Choice] = Nil)
      
      


/** For internal use only.
*/
case class Commonu46att(spiritresolve: Option[ResolveType] = None,
  spiritid: Option[String] = None,
  spiritdependency: Option[String] = None,
  attributes: Map[String, IPXACT2009scalaxb.DataRecord[Any]] = Map.empty,
  spiritchoiceRef: Option[String] = None,
  spiritorder: Option[Float] = None,
  spiritconfigGroups: Option[Seq[String]] = None,
  spiritbitStringLength: Option[BigInt] = None,
  spiritminimum: Option[String] = None,
  spiritmaximum: Option[String] = None)


/** Use this attribute group on string elements for which the schema supplies a default prompt attribute.
*/
case class Stringu46att(spiritformat: FormatType,
  spiritresolve: Option[ResolveType] = None,
  spiritid: Option[String] = None,
  spiritdependency: Option[String] = None,
  attributes: Map[String, IPXACT2009scalaxb.DataRecord[Any]] = Map.empty,
  spiritchoiceRef: Option[String] = None,
  spiritorder: Option[Float] = None,
  spiritconfigGroups: Option[Seq[String]] = None,
  spiritbitStringLength: Option[BigInt] = None,
  spiritminimum: Option[String] = None,
  spiritmaximum: Option[String] = None,
  spiritrangeType: Option[RangeTypeType] = None)


/** Use this attribute group on long integer elements for which the schema supplies a default prompt attribute.
*/
case class Longu46att(spiritformat: FormatType,
  spiritresolve: Option[ResolveType] = None,
  spiritid: Option[String] = None,
  spiritdependency: Option[String] = None,
  attributes: Map[String, IPXACT2009scalaxb.DataRecord[Any]] = Map.empty,
  spiritchoiceRef: Option[String] = None,
  spiritorder: Option[Float] = None,
  spiritconfigGroups: Option[Seq[String]] = None,
  spiritbitStringLength: Option[BigInt] = None,
  spiritminimum: Option[String] = None,
  spiritmaximum: Option[String] = None,
  spiritrangeType: RangeTypeType)


/** Use this attribute group on float elements for which the schema supplies a default prompt attribute.
*/
case class Floatu46att(spiritformat: FormatType,
  spiritresolve: Option[ResolveType] = None,
  spiritid: Option[String] = None,
  spiritdependency: Option[String] = None,
  attributes: Map[String, IPXACT2009scalaxb.DataRecord[Any]] = Map.empty,
  spiritchoiceRef: Option[String] = None,
  spiritorder: Option[Float] = None,
  spiritconfigGroups: Option[Seq[String]] = None,
  spiritbitStringLength: Option[BigInt] = None,
  spiritminimum: Option[String] = None,
  spiritmaximum: Option[String] = None,
  spiritrangeType: RangeTypeType)


/** Use this attribute group on boolean elements for which the schema supplies a default prompt attribute.
*/
case class Boolu46att(spiritformat: FormatType,
  spiritresolve: Option[ResolveType] = None,
  spiritid: Option[String] = None,
  spiritdependency: Option[String] = None,
  attributes: Map[String, IPXACT2009scalaxb.DataRecord[Any]] = Map.empty,
  spiritchoiceRef: Option[String] = None,
  spiritorder: Option[Float] = None,
  spiritconfigGroups: Option[Seq[String]] = None,
  spiritbitStringLength: Option[BigInt] = None,
  spiritminimum: Option[String] = None,
  spiritmaximum: Option[String] = None,
  spiritrangeType: RangeTypeType)


/** Use this attribute group on boolean elements.
*/
case class Boolu46promptu46att(spiritformat: FormatType,
  spiritresolve: Option[ResolveType] = None,
  spiritid: Option[String] = None,
  spiritdependency: Option[String] = None,
  attributes: Map[String, IPXACT2009scalaxb.DataRecord[Any]] = Map.empty,
  spiritchoiceRef: Option[String] = None,
  spiritorder: Option[Float] = None,
  spiritconfigGroups: Option[Seq[String]] = None,
  spiritbitStringLength: Option[BigInt] = None,
  spiritminimum: Option[String] = None,
  spiritmaximum: Option[String] = None,
  spiritrangeType: RangeTypeType,
  spiritprompt: Option[String] = None)


/** Use this attribute group on float elements.
*/
case class Floatu46promptu46att(spiritformat: FormatType,
  spiritresolve: Option[ResolveType] = None,
  spiritid: Option[String] = None,
  spiritdependency: Option[String] = None,
  attributes: Map[String, IPXACT2009scalaxb.DataRecord[Any]] = Map.empty,
  spiritchoiceRef: Option[String] = None,
  spiritorder: Option[Float] = None,
  spiritconfigGroups: Option[Seq[String]] = None,
  spiritbitStringLength: Option[BigInt] = None,
  spiritminimum: Option[String] = None,
  spiritmaximum: Option[String] = None,
  spiritrangeType: RangeTypeType,
  spiritprompt: Option[String] = None)


/** Use this attribute group on long integer elements.
*/
case class Longu46promptu46att(spiritformat: FormatType,
  spiritresolve: Option[ResolveType] = None,
  spiritid: Option[String] = None,
  spiritdependency: Option[String] = None,
  attributes: Map[String, IPXACT2009scalaxb.DataRecord[Any]] = Map.empty,
  spiritchoiceRef: Option[String] = None,
  spiritorder: Option[Float] = None,
  spiritconfigGroups: Option[Seq[String]] = None,
  spiritbitStringLength: Option[BigInt] = None,
  spiritminimum: Option[String] = None,
  spiritmaximum: Option[String] = None,
  spiritrangeType: RangeTypeType,
  spiritprompt: Option[String] = None)


/** Use this attribute group on string elements.
*/
case class Stringu46promptu46att(spiritformat: FormatType,
  spiritresolve: Option[ResolveType] = None,
  spiritid: Option[String] = None,
  spiritdependency: Option[String] = None,
  attributes: Map[String, IPXACT2009scalaxb.DataRecord[Any]] = Map.empty,
  spiritchoiceRef: Option[String] = None,
  spiritorder: Option[Float] = None,
  spiritconfigGroups: Option[Seq[String]] = None,
  spiritbitStringLength: Option[BigInt] = None,
  spiritminimum: Option[String] = None,
  spiritmaximum: Option[String] = None,
  spiritrangeType: Option[RangeTypeType] = None,
  spiritprompt: Option[String] = None)

