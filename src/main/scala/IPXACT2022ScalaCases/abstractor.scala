// Generated by <a href="http://IPXACT2022scalaxb.org/">IPXACT2022scalaxb</a>.
package IPXACT2022ScalaCases

case class AbstractorMode(value: IPXACT2022ScalaCases.AbstractorModeType,
  attributes: Map[String, IPXACT2022scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val group = attributes.get("@group") map { _.as[String]}
}

      
      


case class AbstractorInterfaces(abstractorInterface: Seq[IPXACT2022ScalaCases.AbstractorBusInterfaceType] = Nil)
      
      


/** Abstractor-specific extension to abstractorType
*/
case class AbstractorType(documentNameGroupSequence1: IPXACT2022ScalaCases.DocumentNameGroupSequence,
  abstractorMode: IPXACT2022ScalaCases.AbstractorMode,
  busType: IPXACT2022ScalaCases.LibraryRefType,
  abstractorInterfaces: IPXACT2022ScalaCases.AbstractorInterfaces,
  model: Option[IPXACT2022ScalaCases.AbstractorModelType] = None,
  abstractorGenerators: Option[IPXACT2022ScalaCases.AbstractorGenerators] = None,
  choices: Option[IPXACT2022ScalaCases.Choices] = None,
  fileSets: Option[IPXACT2022ScalaCases.FileSets] = None,
  parameters: Option[IPXACT2022ScalaCases.Parameters] = None,
  assertions: Option[IPXACT2022ScalaCases.Assertions] = None,
  vendorExtensions: Option[IPXACT2022ScalaCases.VendorExtensions] = None,
  attributes: Map[String, IPXACT2022scalaxb.DataRecord[Any]] = Map.empty) extends IPXACTDocumentTypesOption {
  lazy val xmlid = attributes.get("@{http://www.w3.org/XML/1998/namespace}id") map { _.as[String]}
}

      
      

sealed trait AbstractorModeType

object AbstractorModeType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: IPXACT2022scalaxb.XMLFormat[IPXACT2022ScalaCases.AbstractorModeType]): AbstractorModeType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: AbstractorModeType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[AbstractorModeType] = Seq(InitiatorValue, TargetValue, Direct, SystemValue)
}

case object InitiatorValue extends AbstractorModeType { override def toString = "initiator" }
case object TargetValue extends AbstractorModeType { override def toString = "target" }
case object Direct extends AbstractorModeType { override def toString = "direct" }
case object SystemValue extends AbstractorModeType { override def toString = "system" }

