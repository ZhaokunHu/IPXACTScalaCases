package IPXACT2009ScalaCases

// Generated by <a href="http://IPXACT2009scalaxb.org/">IPXACT2009scalaxb</a>.

sealed trait ResolveType

object ResolveType {
  def fromString(value: String, scope: scala.xml.NamespaceBinding)(implicit fmt: IPXACT2009scalaxb.XMLFormat[ResolveType]): ResolveType = fmt.reads(scala.xml.Text(value), Nil) match {
    case Right(x: ResolveType) => x
    case x => throw new RuntimeException(s"fromString returned unexpected value $x for input $value")
  }
  lazy val values: Seq[ResolveType] = Seq(Immediate, User, Dependent, Generated)
}

case object Immediate extends ResolveType { override def toString = "immediate" }
case object User extends ResolveType { override def toString = "user" }
case object Dependent extends ResolveType { override def toString = "dependent" }
case object Generated extends ResolveType { override def toString = "generated" }


/** Base set of attributes for an element to be configurable.
*/
case class Configurable(spiritresolve: Option[ResolveType] = None,
  spiritid: Option[String] = None,
  spiritdependency: Option[String] = None,
  attributes: Map[String, IPXACT2009scalaxb.DataRecord[Any]] = Map.empty)

