// Generated by <a href="http://IPXACT2022scalaxb.org/">IPXACT2022scalaxb</a>.
package IPXACT2022ScalaCases

case class InterfaceRef(interfacerefsequence1: Option[IPXACT2022ScalaCases.InterfaceRefSequence1] = None,
  attributes: Map[String, IPXACT2022scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val componentRef = attributes("@componentRef").as[String]
  lazy val busRef = attributes("@busRef").as[String]
  lazy val xmlid = attributes.get("@{http://www.w3.org/XML/1998/namespace}id") map { _.as[String]}
}

      
      

case class InterfaceRefSequence1(vendorExtensions: Option[IPXACT2022ScalaCases.VendorExtensions] = None)
      

case class AbstractorInstance(instanceName: String,
  displayName: Option[String] = None,
  shortDescription: Option[String] = None,
  description: Option[String] = None,
  abstractorRef: IPXACT2022ScalaCases.ConfigurableLibraryRefType,
  viewName: String,
  attributes: Map[String, IPXACT2022scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val xmlid = attributes.get("@{http://www.w3.org/XML/1998/namespace}id") map { _.as[String]}
}

      
      


case class AbstractorInstances(interfaceRef: Seq[IPXACT2022ScalaCases.InterfaceRef] = Nil,
  abstractorInstance: Seq[IPXACT2022ScalaCases.AbstractorInstance] = Nil,
  vendorExtensions: Option[IPXACT2022ScalaCases.VendorExtensions] = None,
  attributes: Map[String, IPXACT2022scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val xmlid = attributes.get("@{http://www.w3.org/XML/1998/namespace}id") map { _.as[String]}
}

      
      


case class InterconnectionConfiguration(interconnectionRef: String,
  abstractorInstances: Seq[IPXACT2022ScalaCases.AbstractorInstances] = Nil,
  vendorExtensions: Option[IPXACT2022ScalaCases.VendorExtensions] = None,
  attributes: Map[String, IPXACT2022scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val xmlid = attributes.get("@{http://www.w3.org/XML/1998/namespace}id") map { _.as[String]}
}

      
      


case class View3(configurableElementValues: Option[IPXACT2022ScalaCases.ConfigurableElementValues] = None,
  attributes: Map[String, IPXACT2022scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val viewRef = attributes("@viewRef").as[String]
}

      
      


case class ViewConfiguration(instanceName: String,
  view: IPXACT2022ScalaCases.View3,
  vendorExtensions: Option[IPXACT2022ScalaCases.VendorExtensions] = None,
  attributes: Map[String, IPXACT2022scalaxb.DataRecord[Any]] = Map.empty) {
  lazy val xmlid = attributes.get("@{http://www.w3.org/XML/1998/namespace}id") map { _.as[String]}
}

      
      


case class DesignConfiguration(documentNameGroupSequence1: IPXACT2022ScalaCases.DocumentNameGroupSequence,
  designRef: Option[IPXACT2022ScalaCases.LibraryRefType] = None,
  generatorChainConfiguration: Seq[IPXACT2022ScalaCases.ConfigurableLibraryRefType] = Nil,
  interconnectionConfiguration: Seq[IPXACT2022ScalaCases.InterconnectionConfiguration] = Nil,
  viewConfiguration: Seq[IPXACT2022ScalaCases.ViewConfiguration] = Nil,
  choices: Option[IPXACT2022ScalaCases.Choices] = None,
  parameters: Option[IPXACT2022ScalaCases.Parameters] = None,
  assertions: Option[IPXACT2022ScalaCases.Assertions] = None,
  vendorExtensions: Option[IPXACT2022ScalaCases.VendorExtensions] = None,
  attributes: Map[String, IPXACT2022scalaxb.DataRecord[Any]] = Map.empty) extends IPXACTDocumentTypesOption {
  lazy val xmlid = attributes.get("@{http://www.w3.org/XML/1998/namespace}id") map { _.as[String]}
}

      
      

